#!/usr/bin/env python
#
#               .__  .__        _____       
#   ____________|__| |__| _____/ ____\____  
#  /     \_  __ \  | |  |/    \   __\/  _ \ 
# |  Y Y  \  | \/  | |  |   |  \  | (  <_> )
# |__|_|  /__|  |__| |__|___|  /__|  \____/ 
#       \/                   \/             #
# (c) 2016 BU Cloud Computing - Radiology in the Cloud Group
#                   
#
#              https://github.com/BU-NU-CLOUD-SP16/Radiology-in-the-cloud
#                        joshmd@bu.edu
#
# import the plugin.py superclass
import os, sys, subprocess
sys.path.append( os.path.join(os.path.dirname(__file__), '../') )
from plugin import Plugin
sys.path.append(os.path.join(os.path.dirname(__file__), '../../lib'))
from  _common import crun
from  _common import systemMisc as misc
import shutil

class MRIinfo(Plugin):
  '''
  '''
  Plugin.AUTHORS = 'josh (joshmd@bu.edu)'
  Plugin.TITLE = 'mriinfo'
  Plugin.CATEGORY = 'System'
  Plugin.DESCRIPTION = 'Generates basic information about an image file, outputs to a text document'
  Plugin.DOCUMENTATION = 'http://wiki'
  Plugin.LICENSE = 'Opensource (MIT)'
  Plugin.VERSION = '0.1'

  def run(self):
    options = self.options
    tempDir = os.path.join(options.output, "_chrisInput_")
    os.mkdir(tempDir)
    shutil.copy(options.input, tempDir)
    shell = crun.crun()
    shell.echo(True)
    shell.waitForChild(True)
    print "testing...."
    print options.input
    current_dir = os.path.dirname(os.path.abspath(__file__))
    inputCommand = "input/%s" % os.path.basename(options.input)
    print "current directory: %s" % current_dir
    newcmd = '%s %s %s %s > %s' % (os.path.normpath('/home/chris/DockerPlayground/mri_info.sh'), tempDir, tempDir, inputCommand, os.path.join(options.output, 'output.txt'))
    print(newcmd)
    shell(newcmd)

    str_exitCode = str(shell.exitCode())
    if str_exitCode != "0":
      misc.file_writeOnce(os.path.join(self.chrisRunDir, 'ERROR-out.err'), 'Plugin returned error!')


# ENTRYPOINT
if __name__ == "__main__":
  plugin = MRIinfo()
  plugin.add_parameter('Input', Plugin.IMAGE, '--input', action='store', dest='input',
                        help='the image to get info')
  plugin.status = 100 # no cluster job monitoring to mark a feed instantly as done
  plugin.launch()
